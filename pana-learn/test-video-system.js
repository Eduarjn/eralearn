#!/usr/bin/env node

/**
 * Script de Teste R√°pido do Sistema de V√≠deos
 * Verifica se o sistema est√° funcionando corretamente
 */

import fs from 'fs';
import path from 'path';

console.log('üé• TESTE R√ÅPIDO DO SISTEMA DE V√çDEOS');
console.log('=====================================\n');

// Fun√ß√£o para verificar se um arquivo existe
function fileExists(filePath) {
  return fs.existsSync(filePath);
}

// Fun√ß√£o para verificar se um arquivo cont√©m uma string espec√≠fica
function fileContains(filePath, searchString) {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    return content.includes(searchString);
  } catch (error) {
    return false;
  }
}

// Teste 1: Verificar se os componentes foram criados
console.log('üìÅ 1. VERIFICANDO COMPONENTES CRIADOS:');
const components = [
  'src/components/VideoFallback.tsx',
  'src/components/VideoPlayerWithFallback.tsx',
  'fix-video-database.sql'
];

let allComponentsExist = true;
components.forEach(component => {
  const exists = fileExists(component);
  console.log(`   ${exists ? '‚úÖ' : '‚ùå'} ${component}`);
  if (!exists) allComponentsExist = false;
});

// Teste 2: Verificar se as corre√ß√µes foram aplicadas
console.log('\nüîß 2. VERIFICANDO CORRE√á√ïES APLICADAS:');
const hookFile = 'src/hooks/useSignedMediaUrl.ts';
if (fileExists(hookFile)) {
  const corrections = [
    'V√≠deo n√£o dispon√≠vel. Verifique se o arquivo foi carregado corretamente ou entre em contato com o suporte.',
    'V√≠deo espec√≠fico n√£o encontrado, tentando alternativas...'
  ];
  
  corrections.forEach(correction => {
    const applied = fileContains(hookFile, correction);
    console.log(`   ${applied ? '‚úÖ' : '‚ùå'} ${correction.substring(0, 50)}...`);
  });
} else {
  console.log('   ‚ùå Arquivo useSignedMediaUrl.ts n√£o encontrado');
}

// Teste 3: Verificar se o servidor de v√≠deos existe
console.log('\nüñ•Ô∏è  3. VERIFICANDO SERVIDOR DE V√çDEOS:');
if (fileExists('local-video-server.js')) {
  console.log('   ‚úÖ Servidor local de v√≠deos existe');
  console.log('   ‚úÖ Pronto para ser executado com: npm run start:video-server');
} else {
  console.log('   ‚ùå Servidor local de v√≠deos n√£o encontrado');
}

// Teste 4: Verificar scripts do package.json
console.log('\nüì¶ 4. VERIFICANDO SCRIPTS:');
if (fileExists('package.json')) {
  const scripts = [
    'start:video-server',
    'start:videos'
  ];
  
  scripts.forEach(script => {
    const hasScript = fileContains('package.json', script);
    console.log(`   ${hasScript ? '‚úÖ' : '‚ùå'} Script: ${script}`);
  });
} else {
  console.log('   ‚ùå package.json n√£o encontrado');
}

// Resultado final
console.log('\nüìä RESULTADO DO TESTE:');
console.log('========================');

if (allComponentsExist) {
  console.log('‚úÖ Todos os componentes foram criados');
  console.log('‚úÖ Corre√ß√µes aplicadas no hook');
  console.log('‚úÖ Sistema pronto para teste');
  
  console.log('\nüöÄ PR√ìXIMOS PASSOS:');
  console.log('1. Execute o script SQL no Supabase:');
  console.log('   - Abra o Supabase SQL Editor');
  console.log('   - Cole o conte√∫do de fix-video-database.sql');
  console.log('   - Execute o script');
  console.log('');
  console.log('2. Inicie o frontend:');
  console.log('   npm run dev');
  console.log('');
  console.log('3. Teste no navegador:');
  console.log('   - Acesse: http://localhost:8080');
  console.log('   - V√° para o curso PABX');
  console.log('   - Os v√≠deos devem carregar ou mostrar fallback amig√°vel');
  console.log('');
  console.log('4. Se ainda houver problemas:');
  console.log('   - Verifique o console do navegador');
  console.log('   - Execute o script SQL novamente');
  console.log('   - Entre em contato com o suporte');
  
} else {
  console.log('‚ùå Alguns componentes n√£o foram encontrados');
  console.log('‚ö†Ô∏è  Verifique se todas as corre√ß√µes foram aplicadas');
}

console.log('\nüéØ TESTE CONCLU√çDO!');




