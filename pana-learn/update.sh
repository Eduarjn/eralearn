#!/bin/bash

# ========================================
# ERA Learn - Script de Atualiza√ß√£o
# ========================================

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}"
    exit 1
}

warning() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

info() {
    echo -e "${BLUE}[INFO] $1${NC}"
}

log "üîÑ Iniciando atualiza√ß√£o do ERA Learn"

# Verificar se estamos no diret√≥rio correto
if [ ! -f "docker-compose.prod.yml" ]; then
    error "Execute este script no diret√≥rio /opt/eralearn"
fi

# ========================================
# 1. BACKUP ANTES DA ATUALIZA√á√ÉO
# ========================================
log "üíæ Fazendo backup antes da atualiza√ß√£o..."

if [ -f "backup.sh" ]; then
    ./backup.sh
    log "‚úÖ Backup conclu√≠do"
else
    warning "Script de backup n√£o encontrado, continuando sem backup"
fi

# ========================================
# 2. PARAR SERVI√áOS
# ========================================
log "‚èπÔ∏è Parando servi√ßos..."
docker-compose -f docker-compose.prod.yml down
log "‚úÖ Servi√ßos parados"

# ========================================
# 3. ATUALIZAR C√ìDIGO
# ========================================
log "üì• Atualizando c√≥digo..."

# Verificar se √© um reposit√≥rio Git
if [ -d ".git" ]; then
    log "Reposit√≥rio Git detectado, fazendo pull..."
    git pull origin main
    log "‚úÖ C√≥digo atualizado via Git"
else
    log "Baixando vers√£o mais recente do GitHub..."
    
    # Fazer backup dos arquivos de configura√ß√£o
    cp .env .env.backup 2>/dev/null || true
    cp nginx/conf.d/eralearn.conf nginx/conf.d/eralearn.conf.backup 2>/dev/null || true
    
    # Baixar nova vers√£o
    curl -fsSL https://github.com/Eduarjn/eralearn/archive/main.zip -o eralearn-update.zip
    unzip -q eralearn-update.zip
    
    # Copiar arquivos novos
    cp -r eralearn-main/* .
    cp -r eralearn-main/.* . 2>/dev/null || true
    
    # Restaurar arquivos de configura√ß√£o
    cp .env.backup .env 2>/dev/null || true
    cp nginx/conf.d/eralearn.conf.backup nginx/conf.d/eralearn.conf 2>/dev/null || true
    
    # Limpar arquivos tempor√°rios
    rm -rf eralearn-main eralearn-update.zip .env.backup nginx/conf.d/eralearn.conf.backup
    
    log "‚úÖ C√≥digo atualizado via download"
fi

# ========================================
# 4. ATUALIZAR PERMISS√ïES
# ========================================
log "üîê Atualizando permiss√µes..."
chmod +x *.sh
log "‚úÖ Permiss√µes atualizadas"

# ========================================
# 5. VERIFICAR CONFIGURA√á√ïES
# ========================================
log "‚öôÔ∏è Verificando configura√ß√µes..."

# Verificar se arquivo .env existe
if [ ! -f ".env" ]; then
    warning "Arquivo .env n√£o encontrado, criando a partir do exemplo..."
    cp env.production.example .env
    warning "‚ö†Ô∏è Configure o arquivo .env com suas vari√°veis espec√≠ficas"
fi

# Verificar se configura√ß√£o do Nginx existe
if [ ! -f "nginx/conf.d/eralearn.conf" ]; then
    warning "Configura√ß√£o do Nginx n√£o encontrada"
    warning "‚ö†Ô∏è Execute o script de deploy para reconfigurar"
fi

log "‚úÖ Configura√ß√µes verificadas"

# ========================================
# 6. RECONSTRUIR APLICA√á√ÉO
# ========================================
log "üî® Reconstruindo aplica√ß√£o..."

# Limpar imagens antigas
docker system prune -f

# Reconstruir com cache limpo
docker-compose -f docker-compose.prod.yml build --no-cache

log "‚úÖ Aplica√ß√£o reconstru√≠da"

# ========================================
# 7. INICIAR SERVI√áOS
# ========================================
log "üöÄ Iniciando servi√ßos..."
docker-compose -f docker-compose.prod.yml up -d

# Aguardar aplica√ß√£o inicializar
log "‚è≥ Aguardando aplica√ß√£o inicializar..."
sleep 30

log "‚úÖ Servi√ßos iniciados"

# ========================================
# 8. VERIFICAR STATUS
# ========================================
log "üîç Verificando status da aplica√ß√£o..."

# Verificar containers
if docker-compose -f docker-compose.prod.yml ps | grep -q "Up"; then
    log "‚úÖ Aplica√ß√£o iniciada com sucesso"
else
    error "‚ùå Falha ao iniciar a aplica√ß√£o"
fi

# Verificar logs por erros
log "üìã Verificando logs por erros..."
ERRORS=$(docker-compose -f docker-compose.prod.yml logs --tail=50 | grep -i error | wc -l)
if [ "$ERRORS" -gt 0 ]; then
    warning "‚ö†Ô∏è Encontrados $ERRORS erros nos logs"
    docker-compose -f docker-compose.prod.yml logs --tail=20 | grep -i error
else
    log "‚úÖ Nenhum erro encontrado nos logs"
fi

# ========================================
# 9. TESTAR CONECTIVIDADE
# ========================================
log "üåç Testando conectividade..."

# Obter dom√≠nio do arquivo .env
if [ -f ".env" ]; then
    DOMAIN=$(grep "VITE_APP_URL" .env | cut -d'=' -f2 | sed 's|https://||' | sed 's|/||')
    if [ ! -z "$DOMAIN" ]; then
        # Testar HTTPS
        HTTPS_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://$DOMAIN || echo "000")
        if [ "$HTTPS_STATUS" = "200" ]; then
            log "‚úÖ HTTPS funcionando corretamente"
        else
            warning "‚ö†Ô∏è HTTPS pode n√£o estar funcionando (Status: $HTTPS_STATUS)"
        fi
        
        # Testar API
        API_STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://$DOMAIN/api/ || echo "000")
        if [ "$API_STATUS" = "200" ] || [ "$API_STATUS" = "404" ]; then
            log "‚úÖ API funcionando corretamente"
        else
            warning "‚ö†Ô∏è API pode n√£o estar funcionando (Status: $API_STATUS)"
        fi
    else
        warning "‚ö†Ô∏è Dom√≠nio n√£o configurado no .env"
    fi
else
    warning "‚ö†Ô∏è Arquivo .env n√£o encontrado"
fi

# ========================================
# 10. LIMPEZA
# ========================================
log "üßπ Fazendo limpeza..."

# Limpar imagens n√£o utilizadas
docker image prune -f

# Limpar volumes n√£o utilizados
docker volume prune -f

log "‚úÖ Limpeza conclu√≠da"

# ========================================
# 11. FINALIZA√á√ÉO
# ========================================
log "üéâ Atualiza√ß√£o conclu√≠da!"

echo ""
echo "=========================================="
echo "üéâ ERA LEARN ATUALIZADO COM SUCESSO!"
echo "=========================================="
echo ""

# Mostrar status atual
echo "üìä Status atual:"
docker-compose -f docker-compose.prod.yml ps

echo ""
echo "üìã Logs recentes:"
docker-compose -f docker-compose.prod.yml logs --tail=10

echo ""
echo "üõ†Ô∏è Comandos √∫teis:"
echo "  Status: ./status.sh"
echo "  Logs: docker-compose -f docker-compose.prod.yml logs -f"
echo "  Reiniciar: docker-compose -f docker-compose.prod.yml restart"
echo ""

# Verificar se h√° atualiza√ß√µes pendentes
if [ -d ".git" ]; then
    git fetch origin
    BEHIND=$(git rev-list --count HEAD..origin/main)
    if [ "$BEHIND" -gt 0 ]; then
        warning "‚ö†Ô∏è H√° $BEHIND commits pendentes. Execute novamente para atualizar."
    else
        log "‚úÖ Aplica√ß√£o est√° atualizada"
    fi
fi

echo "üéØ Sua aplica√ß√£o est√° rodando com a vers√£o mais recente!"
echo ""
