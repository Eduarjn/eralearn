#!/bin/bash

# ========================================
# Script para Deploy das Corre√ß√µes no Servidor
# ========================================

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}"
    exit 1
}

warning() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

info() {
    echo -e "${BLUE}[INFO] $1${NC}"
}

log "üöÄ Iniciando deploy das corre√ß√µes para o servidor..."

# ========================================
# 1. VERIFICAR PR√â-REQUISITOS
# ========================================
log "Verificando pr√©-requisitos..."

# Verificar se estamos no diret√≥rio correto
if [ ! -f "package.json" ]; then
    error "Execute este script no diret√≥rio raiz do projeto ERA Learn"
fi

# Verificar se Git est√° instalado
if ! command -v git &> /dev/null; then
    error "Git n√£o est√° instalado"
fi

# Verificar se Docker est√° instalado
if ! command -v docker &> /dev/null; then
    error "Docker n√£o est√° instalado"
fi

# Verificar se Docker Compose est√° instalado
if ! command -v docker-compose &> /dev/null; then
    error "Docker Compose n√£o est√° instalado"
fi

# ========================================
# 2. ATUALIZAR C√ìDIGO DO REPOSIT√ìRIO
# ========================================
log "Atualizando c√≥digo do reposit√≥rio..."

# Fazer backup do estado atual
if [ -d ".git" ]; then
    log "Fazendo backup do estado atual..."
    git stash push -m "Backup antes do deploy $(date)"
fi

# Atualizar do reposit√≥rio remoto
log "Atualizando do reposit√≥rio remoto..."
git fetch origin
git pull origin main

log "‚úÖ C√≥digo atualizado com sucesso"

# ========================================
# 3. APLICAR CORRE√á√ïES DE IMAGENS
# ========================================
log "Aplicando corre√ß√µes de carregamento de imagens..."

if [ -f "fix-server-images.sh" ]; then
    log "Executando script de corre√ß√£o de imagens..."
    chmod +x fix-server-images.sh
    ./fix-server-images.sh
    log "‚úÖ Corre√ß√µes de imagens aplicadas"
else
    warning "Script de corre√ß√£o de imagens n√£o encontrado"
fi

# ========================================
# 4. CONFIGURAR SISTEMA DE V√çDEOS
# ========================================
log "Configurando sistema de v√≠deos..."

if [ -f "setup-videos-server.sh" ]; then
    log "Executando script de configura√ß√£o de v√≠deos..."
    chmod +x setup-videos-server.sh
    ./setup-videos-server.sh
    log "‚úÖ Sistema de v√≠deos configurado"
else
    warning "Script de configura√ß√£o de v√≠deos n√£o encontrado"
fi

# ========================================
# 5. CONSTRUIR E INICIAR APLICA√á√ÉO
# ========================================
log "Construindo e iniciando aplica√ß√£o..."

# Parar containers existentes
log "Parando containers existentes..."
docker-compose -f docker-compose.prod.yml down || true

# Construir nova imagem
log "Construindo nova imagem..."
docker-compose -f docker-compose.prod.yml build --no-cache

# Iniciar aplica√ß√£o
log "Iniciando aplica√ß√£o..."
docker-compose -f docker-compose.prod.yml up -d

# Aguardar aplica√ß√£o inicializar
log "Aguardando aplica√ß√£o inicializar..."
sleep 30

# ========================================
# 6. INICIAR SERVI√áOS DE V√çDEO
# ========================================
log "Iniciando servi√ßos de v√≠deo..."

if [ -f "start-video-services.sh" ]; then
    chmod +x start-video-services.sh
    ./start-video-services.sh
    log "‚úÖ Servi√ßos de v√≠deo iniciados"
else
    warning "Script de inicializa√ß√£o de v√≠deos n√£o encontrado"
fi

# ========================================
# 7. VERIFICAR STATUS
# ========================================
log "Verificando status da aplica√ß√£o..."

# Verificar containers
if docker-compose -f docker-compose.prod.yml ps | grep -q "Up"; then
    log "‚úÖ Aplica√ß√£o iniciada com sucesso"
else
    error "‚ùå Falha ao iniciar a aplica√ß√£o"
fi

# Verificar servi√ßos de v√≠deo
if pgrep -f "local-video-server.js" > /dev/null; then
    log "‚úÖ Servidor de v√≠deos funcionando"
else
    warning "‚ö†Ô∏è Servidor de v√≠deos pode n√£o estar funcionando"
fi

if pgrep -f "local-upload-server.js" > /dev/null; then
    log "‚úÖ Servidor de upload funcionando"
else
    warning "‚ö†Ô∏è Servidor de upload pode n√£o estar funcionando"
fi

# ========================================
# 8. TESTAR CORRE√á√ïES
# ========================================
log "Testando corre√ß√µes..."

# Testar carregamento de imagens
if curl -f -s "http://localhost/logotipoeralearn.svg" > /dev/null; then
    log "‚úÖ Logo SVG carregando corretamente"
else
    warning "‚ö†Ô∏è Logo SVG pode n√£o estar carregando"
fi

# Testar servidor de v√≠deos
if curl -f -s "http://localhost:3001/health" > /dev/null; then
    log "‚úÖ Servidor de v√≠deos funcionando"
else
    warning "‚ö†Ô∏è Servidor de v√≠deos pode n√£o estar funcionando"
fi

# ========================================
# 9. FINALIZA√á√ÉO
# ========================================
log "üéâ Deploy das corre√ß√µes conclu√≠do!"
echo ""
echo "=========================================="
echo "üöÄ CORRE√á√ïES APLICADAS COM SUCESSO!"
echo "=========================================="
echo ""
echo "‚úÖ Corre√ß√µes aplicadas:"
echo "   - Carregamento de imagens corrigido"
echo "   - Sistema de v√≠deos configurado"
echo "   - Aplica√ß√£o reiniciada"
echo ""
echo "üìä Status dos servi√ßos:"
echo "   - Aplica√ß√£o principal: $(docker-compose -f docker-compose.prod.yml ps --services | wc -l) containers rodando"
echo "   - Servidor de v√≠deos: $(pgrep -f "local-video-server.js" | wc -l) processo(s)"
echo "   - Servidor de upload: $(pgrep -f "local-upload-server.js" | wc -l) processo(s)"
echo ""
echo "üåê URLs dispon√≠veis:"
echo "   - Aplica√ß√£o: http://localhost"
echo "   - V√≠deos: http://localhost:3001"
echo "   - Upload: http://localhost:3001/api"
echo ""
echo "üõ†Ô∏è Comandos √∫teis:"
echo "   - Status: docker-compose -f docker-compose.prod.yml ps"
echo "   - Logs: docker-compose -f docker-compose.prod.yml logs -f"
echo "   - Testar v√≠deos: ./test-video-services.sh"
echo "   - Monitorar: ./monitor-video-services.sh"
echo ""
echo "üéØ Problemas de carregamento de imagens e v√≠deos devem estar resolvidos!"
echo ""

# Mostrar logs recentes
echo "üìã Logs recentes da aplica√ß√£o:"
docker-compose -f docker-compose.prod.yml logs --tail=10
