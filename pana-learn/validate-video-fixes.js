#!/usr/bin/env node

/**
 * Script de Valida√ß√£o das Corre√ß√µes de V√≠deo
 * Verifica se todas as corre√ß√µes foram aplicadas corretamente
 */

import fs from 'fs';
import path from 'path';

console.log('üé• VALIDA√á√ÉO DAS CORRE√á√ïES DE V√çDEO');
console.log('=====================================\n');

// Fun√ß√£o para verificar se um arquivo existe
function fileExists(filePath) {
  return fs.existsSync(filePath);
}

// Fun√ß√£o para verificar se um arquivo cont√©m uma string espec√≠fica
function fileContains(filePath, searchString) {
  try {
    const content = fs.readFileSync(filePath, 'utf8');
    return content.includes(searchString);
  } catch (error) {
    return false;
  }
}

// Teste 1: Verificar se os arquivos principais existem
console.log('üìÅ 1. VERIFICANDO ARQUIVOS PRINCIPAIS:');
const requiredFiles = [
  'src/hooks/useSignedMediaUrl.ts',
  'local-video-server.js',
  'package.json',
  'SOLUCAO_CARREGAMENTO_VIDEOS.md'
];

let allFilesExist = true;
requiredFiles.forEach(file => {
  const exists = fileExists(file);
  console.log(`   ${exists ? '‚úÖ' : '‚ùå'} ${file}`);
  if (!exists) allFilesExist = false;
});

// Teste 2: Verificar se as corre√ß√µes foram aplicadas no useSignedMediaUrl.ts
console.log('\nüîß 2. VERIFICANDO CORRE√á√ïES NO HOOK:');
const hookFile = 'src/hooks/useSignedMediaUrl.ts';
if (fileExists(hookFile)) {
  const corrections = [
    'V√≠deo n√£o dispon√≠vel. O servidor local est√° offline e o arquivo n√£o foi encontrado no Supabase.',
    'V√≠deo n√£o dispon√≠vel. Verifique se o arquivo foi carregado corretamente.',
    'tentar Supabase primeiro (mais confi√°vel), depois servidor local'
  ];
  
  corrections.forEach(correction => {
    const applied = fileContains(hookFile, correction);
    console.log(`   ${applied ? '‚úÖ' : '‚ùå'} ${correction.substring(0, 50)}...`);
  });
} else {
  console.log('   ‚ùå Arquivo useSignedMediaUrl.ts n√£o encontrado');
}

// Teste 3: Verificar se o servidor de v√≠deos foi criado
console.log('\nüñ•Ô∏è  3. VERIFICANDO SERVIDOR DE V√çDEOS:');
if (fileExists('local-video-server.js')) {
  const serverFeatures = [
    'express',
    'cors',
    'PORT = 3001',
    'VIDEOS_DIR',
    'app.use(\'/videos\', express.static(VIDEOS_DIR))'
  ];
  
  serverFeatures.forEach(feature => {
    const hasFeature = fileContains('local-video-server.js', feature);
    console.log(`   ${hasFeature ? '‚úÖ' : '‚ùå'} ${feature}`);
  });
} else {
  console.log('   ‚ùå Servidor de v√≠deos n√£o encontrado');
}

// Teste 4: Verificar se os scripts foram adicionados ao package.json
console.log('\nüì¶ 4. VERIFICANDO SCRIPTS DO PACKAGE.JSON:');
if (fileExists('package.json')) {
  const scripts = [
    'start:video-server',
    'start:videos'
  ];
  
  scripts.forEach(script => {
    const hasScript = fileContains('package.json', script);
    console.log(`   ${hasScript ? '‚úÖ' : '‚ùå'} Script: ${script}`);
  });
} else {
  console.log('   ‚ùå package.json n√£o encontrado');
}

// Teste 5: Verificar se o guia de solu√ß√£o foi criado
console.log('\nüìö 5. VERIFICANDO DOCUMENTA√á√ÉO:');
if (fileExists('SOLUCAO_CARREGAMENTO_VIDEOS.md')) {
  const docSections = [
    'PROBLEMA IDENTIFICADO',
    'SOLU√á√ïES IMPLEMENTADAS',
    'COMO RESOLVER O PROBLEMA',
    'OP√á√ÉO 1: Usar Apenas Supabase',
    'OP√á√ÉO 2: Usar Servidor Local'
  ];
  
  docSections.forEach(section => {
    const hasSection = fileContains('SOLUCAO_CARREGAMENTO_VIDEOS.md', section);
    console.log(`   ${hasSection ? '‚úÖ' : '‚ùå'} ${section}`);
  });
} else {
  console.log('   ‚ùå Guia de solu√ß√£o n√£o encontrado');
}

// Teste 6: Verificar se as corre√ß√µes da faixa preta foram aplicadas
console.log('\nüé® 6. VERIFICANDO CORRE√á√ïES DA FAIXA PRETA:');
const layoutFiles = [
  'src/components/ERALayout.tsx',
  'src/components/layout/Sidebar.tsx',
  'src/index.css'
];

layoutFiles.forEach(file => {
  if (fileExists(file)) {
    const hasFix = fileContains(file, 'lg:pl-64') === false; // N√£o deve ter lg:pl-64
    console.log(`   ${hasFix ? '‚úÖ' : '‚ùå'} ${file} - Faixa preta removida`);
  } else {
    console.log(`   ‚ùå ${file} n√£o encontrado`);
  }
});

// Resultado final
console.log('\nüìä RESULTADO DA VALIDA√á√ÉO:');
console.log('==========================');

if (allFilesExist) {
  console.log('‚úÖ Todos os arquivos principais foram criados');
  console.log('‚úÖ Corre√ß√µes de v√≠deo implementadas');
  console.log('‚úÖ Servidor local de v√≠deos criado');
  console.log('‚úÖ Scripts adicionados ao package.json');
  console.log('‚úÖ Documenta√ß√£o criada');
  
  console.log('\nüöÄ PR√ìXIMOS PASSOS PARA TESTAR:');
  console.log('1. Instalar depend√™ncias do servidor (se necess√°rio):');
  console.log('   npm install express cors');
  console.log('');
  console.log('2. Iniciar o servidor de v√≠deos:');
  console.log('   npm run start:video-server');
  console.log('');
  console.log('3. Iniciar o frontend (em outro terminal):');
  console.log('   npm run dev');
  console.log('');
  console.log('4. Testar no navegador:');
  console.log('   - Acesse: http://localhost:8080');
  console.log('   - V√° para qualquer curso');
  console.log('   - Verifique se os v√≠deos carregam');
  console.log('   - Verifique se n√£o h√° mais faixa preta');
  console.log('');
  console.log('5. Verificar logs no console:');
  console.log('   - N√£o deve haver mais erros de "Servidor local indispon√≠vel"');
  console.log('   - V√≠deos devem carregar do Supabase automaticamente');
  
} else {
  console.log('‚ùå Alguns arquivos n√£o foram encontrados');
  console.log('‚ö†Ô∏è  Verifique se todas as corre√ß√µes foram aplicadas');
}

console.log('\nüéØ VALIDA√á√ÉO CONCLU√çDA!');
