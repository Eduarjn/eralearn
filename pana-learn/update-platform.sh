#!/bin/bash

# ========================================
# Script de Atualiza√ß√£o da Plataforma ERA Learn
# ========================================

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}"
    exit 1
}

warning() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

info() {
    echo -e "${BLUE}[INFO] $1${NC}"
}

log "üîÑ Iniciando atualiza√ß√£o da plataforma ERA Learn..."

# ========================================
# 1. VERIFICAR PR√â-REQUISITOS
# ========================================
log "Verificando pr√©-requisitos..."

# Verificar se estamos no diret√≥rio correto
if [ ! -f "package.json" ]; then
    error "Execute este script no diret√≥rio raiz do projeto ERA Learn"
fi

# Verificar se Git est√° instalado
if ! command -v git &> /dev/null; then
    error "Git n√£o est√° instalado"
fi

# Verificar se Docker est√° instalado
if ! command -v docker &> /dev/null; then
    error "Docker n√£o est√° instalado"
fi

# Verificar se Docker Compose est√° instalado
if ! command -v docker-compose &> /dev/null; then
    error "Docker Compose n√£o est√° instalado"
fi

# ========================================
# 2. BACKUP DO ESTADO ATUAL
# ========================================
log "Fazendo backup do estado atual..."

# Criar diret√≥rio de backup
BACKUP_DIR="backup-$(date +%Y%m%d-%H%M%S)"
mkdir -p "$BACKUP_DIR"

# Backup dos arquivos importantes
if [ -f ".env" ]; then
    cp .env "$BACKUP_DIR/"
    log "‚úÖ Backup do .env criado"
fi

if [ -d "data" ]; then
    cp -r data "$BACKUP_DIR/"
    log "‚úÖ Backup dos dados criado"
fi

if [ -d "videos" ]; then
    cp -r videos "$BACKUP_DIR/"
    log "‚úÖ Backup dos v√≠deos criado"
fi

log "üìÅ Backup salvo em: $BACKUP_DIR"

# ========================================
# 3. VERIFICAR STATUS DO GIT
# ========================================
log "Verificando status do Git..."

# Verificar se h√° mudan√ßas n√£o commitadas
if ! git diff --quiet || ! git diff --cached --quiet; then
    warning "H√° mudan√ßas n√£o commitadas. Fazendo stash..."
    git stash push -m "Backup antes da atualiza√ß√£o $(date)"
fi

# Verificar branch atual
CURRENT_BRANCH=$(git branch --show-current)
log "Branch atual: $CURRENT_BRANCH"

# ========================================
# 4. ATUALIZAR DO REPOSIT√ìRIO REMOTO
# ========================================
log "Atualizando do reposit√≥rio remoto..."

# Buscar atualiza√ß√µes
log "Buscando atualiza√ß√µes do GitHub..."
git fetch origin

# Verificar se h√° atualiza√ß√µes
LOCAL_COMMIT=$(git rev-parse HEAD)
REMOTE_COMMIT=$(git rev-parse origin/main)

if [ "$LOCAL_COMMIT" = "$REMOTE_COMMIT" ]; then
    log "‚úÖ J√° est√° na vers√£o mais recente!"
    exit 0
fi

# Mostrar commits que ser√£o aplicados
log "Commits que ser√£o aplicados:"
git log --oneline "$LOCAL_COMMIT..$REMOTE_COMMIT"

# Confirmar atualiza√ß√£o
echo ""
read -p "Deseja continuar com a atualiza√ß√£o? (y/N): " -n 1 -r
echo ""
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    log "Atualiza√ß√£o cancelada pelo usu√°rio"
    exit 0
fi

# Fazer pull das atualiza√ß√µes
log "Aplicando atualiza√ß√µes..."
git pull origin main

log "‚úÖ C√≥digo atualizado com sucesso"

# ========================================
# 5. INSTALAR/ATUALIZAR DEPEND√äNCIAS
# ========================================
log "Atualizando depend√™ncias..."

if [ -f "package.json" ]; then
    log "Instalando depend√™ncias do Node.js..."
    npm install
    log "‚úÖ Depend√™ncias do Node.js atualizadas"
fi

# ========================================
# 6. APLICAR CORRE√á√ïES E CONFIGURA√á√ïES
# ========================================
log "Aplicando corre√ß√µes e configura√ß√µes..."

# Aplicar corre√ß√µes de imagens se o script existir
if [ -f "fix-server-images.sh" ]; then
    log "Aplicando corre√ß√µes de imagens..."
    chmod +x fix-server-images.sh
    ./fix-server-images.sh
    log "‚úÖ Corre√ß√µes de imagens aplicadas"
fi

# Configurar sistema de v√≠deos se o script existir
if [ -f "setup-videos-server.sh" ]; then
    log "Configurando sistema de v√≠deos..."
    chmod +x setup-videos-server.sh
    ./setup-videos-server.sh
    log "‚úÖ Sistema de v√≠deos configurado"
fi

# ========================================
# 7. PARAR SERVI√áOS ATUAIS
# ========================================
log "Parando servi√ßos atuais..."

# Parar containers Docker
if docker-compose -f docker-compose.prod.yml ps | grep -q "Up"; then
    log "Parando containers Docker..."
    docker-compose -f docker-compose.prod.yml down
    log "‚úÖ Containers parados"
fi

# Parar servi√ßos de v√≠deo se estiverem rodando
if [ -f "stop-video-services.sh" ]; then
    chmod +x stop-video-services.sh
    ./stop-video-services.sh
    log "‚úÖ Servi√ßos de v√≠deo parados"
fi

# ========================================
# 8. CONSTRUIR E INICIAR NOVA VERS√ÉO
# ========================================
log "Construindo e iniciando nova vers√£o..."

# Construir nova imagem
log "Construindo nova imagem Docker..."
docker-compose -f docker-compose.prod.yml build --no-cache

# Iniciar aplica√ß√£o
log "Iniciando aplica√ß√£o..."
docker-compose -f docker-compose.prod.yml up -d

# Aguardar aplica√ß√£o inicializar
log "Aguardando aplica√ß√£o inicializar..."
sleep 30

# ========================================
# 9. INICIAR SERVI√áOS DE V√çDEO
# ========================================
log "Iniciando servi√ßos de v√≠deo..."

if [ -f "start-video-services.sh" ]; then
    chmod +x start-video-services.sh
    ./start-video-services.sh
    log "‚úÖ Servi√ßos de v√≠deo iniciados"
fi

# ========================================
# 10. VERIFICAR STATUS
# ========================================
log "Verificando status da aplica√ß√£o..."

# Verificar containers
if docker-compose -f docker-compose.prod.yml ps | grep -q "Up"; then
    log "‚úÖ Aplica√ß√£o iniciada com sucesso"
else
    error "‚ùå Falha ao iniciar a aplica√ß√£o"
fi

# Verificar servi√ßos de v√≠deo
if pgrep -f "local-video-server.js" > /dev/null; then
    log "‚úÖ Servidor de v√≠deos funcionando"
else
    warning "‚ö†Ô∏è Servidor de v√≠deos pode n√£o estar funcionando"
fi

if pgrep -f "local-upload-server.js" > /dev/null; then
    log "‚úÖ Servidor de upload funcionando"
else
    warning "‚ö†Ô∏è Servidor de upload pode n√£o estar funcionando"
fi

# ========================================
# 11. TESTAR FUNCIONAMENTO
# ========================================
log "Testando funcionamento..."

# Testar carregamento de imagens
if curl -f -s "http://localhost/logotipoeralearn.svg" > /dev/null; then
    log "‚úÖ Logo SVG carregando corretamente"
else
    warning "‚ö†Ô∏è Logo SVG pode n√£o estar carregando"
fi

# Testar servidor de v√≠deos
if curl -f -s "http://localhost:3001/health" > /dev/null; then
    log "‚úÖ Servidor de v√≠deos funcionando"
else
    warning "‚ö†Ô∏è Servidor de v√≠deos pode n√£o estar funcionando"
fi

# ========================================
# 12. FINALIZA√á√ÉO
# ========================================
log "üéâ Atualiza√ß√£o conclu√≠da com sucesso!"
echo ""
echo "=========================================="
echo "üöÄ PLATAFORMA ERA LEARN ATUALIZADA!"
echo "=========================================="
echo ""
echo "‚úÖ Atualiza√ß√µes aplicadas:"
echo "   - C√≥digo atualizado do GitHub"
echo "   - Depend√™ncias atualizadas"
echo "   - Corre√ß√µes de imagens aplicadas"
echo "   - Sistema de v√≠deos configurado"
echo "   - Aplica√ß√£o reiniciada"
echo ""
echo "üìä Status dos servi√ßos:"
echo "   - Aplica√ß√£o principal: $(docker-compose -f docker-compose.prod.yml ps --services | wc -l) containers rodando"
echo "   - Servidor de v√≠deos: $(pgrep -f "local-video-server.js" | wc -l) processo(s)"
echo "   - Servidor de upload: $(pgrep -f "local-upload-server.js" | wc -l) processo(s)"
echo ""
echo "üåê URLs dispon√≠veis:"
echo "   - Aplica√ß√£o: http://localhost"
echo "   - V√≠deos: http://localhost:3001"
echo "   - Upload: http://localhost:3001/api"
echo ""
echo "üìÅ Backup salvo em: $BACKUP_DIR"
echo ""
echo "üõ†Ô∏è Comandos √∫teis:"
echo "   - Status: docker-compose -f docker-compose.prod.yml ps"
echo "   - Logs: docker-compose -f docker-compose.prod.yml logs -f"
echo "   - Testar v√≠deos: ./test-video-services.sh"
echo "   - Monitorar: ./monitor-video-services.sh"
echo ""
echo "üéØ Sua plataforma est√° atualizada e funcionando!"
echo ""

# Mostrar logs recentes
echo "üìã Logs recentes da aplica√ß√£o:"
docker-compose -f docker-compose.prod.yml logs --tail=10





