-- Script completo para testar cria√ß√£o de usu√°rios
-- Data: 2025-01-29

-- 1. Verificar estrutura atual
SELECT '=== ESTRUTURA DA TABELA USUARIOS ===' as info;
SELECT 
  column_name, 
  data_type, 
  is_nullable, 
  column_default
FROM information_schema.columns 
WHERE table_name = 'usuarios' 
AND table_schema = 'public'
ORDER BY ordinal_position;

-- 2. Verificar fun√ß√£o handle_new_user
SELECT '=== FUN√á√ÉO HANDLE_NEW_USER ===' as info;
SELECT 
  routine_name,
  routine_definition
FROM information_schema.routines 
WHERE routine_name = 'handle_new_user'
AND routine_schema = 'public';

-- 3. Verificar trigger
SELECT '=== TRIGGER ON_AUTH_USER_CREATED ===' as info;
SELECT 
  trigger_name,
  event_manipulation,
  action_statement
FROM information_schema.triggers 
WHERE trigger_name = 'on_auth_user_created';

-- 4. Verificar pol√≠ticas RLS
SELECT '=== POL√çTICAS RLS ===' as info;
SELECT 
  policyname,
  cmd,
  qual
FROM pg_policies 
WHERE tablename = 'usuarios';

-- 5. Teste 1: Criar usu√°rio via API (simula√ß√£o)
SELECT '=== TESTE 1: SIMULA√á√ÉO DE CRIA√á√ÉO VIA API ===' as info;

-- Simular dados de um novo usu√°rio
DO $$
DECLARE
  test_user_id UUID := gen_random_uuid();
  test_email TEXT := 'teste-api-' || extract(epoch from now())::text || '@exemplo.com';
BEGIN
  -- Inserir diretamente na tabela usuarios (simulando cria√ß√£o por admin)
  INSERT INTO public.usuarios (
    nome,
    email,
    tipo_usuario,
    status
  ) VALUES (
    'Usu√°rio Teste API',
    test_email,
    'cliente',
    'ativo'
  );
  
  RAISE NOTICE '‚úÖ Usu√°rio criado via API: %', test_email;
  
  -- Verificar se foi criado
  IF EXISTS (SELECT 1 FROM public.usuarios WHERE email = test_email) THEN
    RAISE NOTICE '‚úÖ Verifica√ß√£o: Usu√°rio encontrado na tabela';
  ELSE
    RAISE NOTICE '‚ùå Verifica√ß√£o: Usu√°rio N√ÉO encontrado na tabela';
  END IF;
  
  -- Limpeza
  DELETE FROM public.usuarios WHERE email = test_email;
  RAISE NOTICE 'üßπ Usu√°rio de teste removido';
END $$;

-- 6. Teste 2: Verificar se trigger funcionaria
SELECT '=== TESTE 2: VERIFICA√á√ÉO DO TRIGGER ===' as info;

-- Verificar se a fun√ß√£o handle_new_user est√° correta
SELECT 
  CASE 
    WHEN routine_definition LIKE '%user_id%' THEN '‚úÖ CORRETO: Usa user_id'
    ELSE '‚ùå PROBLEMA: N√£o usa user_id'
  END as verificacao_user_id,
  CASE 
    WHEN routine_definition LIKE '%NEW.id%' THEN '‚úÖ CORRETO: Usa NEW.id'
    ELSE '‚ùå PROBLEMA: N√£o usa NEW.id'
  END as verificacao_new_id
FROM information_schema.routines 
WHERE routine_name = 'handle_new_user'
AND routine_schema = 'public';

-- 7. Teste 3: Verificar dados existentes
SELECT '=== TESTE 3: DADOS EXISTENTES ===' as info;
SELECT 
  COUNT(*) as total_usuarios,
  COUNT(user_id) as usuarios_com_auth,
  COUNT(*) - COUNT(user_id) as usuarios_sem_auth
FROM public.usuarios;

-- 8. Teste 4: Verificar tipos de usu√°rio
SELECT '=== TESTE 4: TIPOS DE USU√ÅRIO ===' as info;
SELECT 
  tipo_usuario,
  COUNT(*) as quantidade
FROM public.usuarios
GROUP BY tipo_usuario
ORDER BY tipo_usuario;

-- 9. Teste 5: Verificar status dos usu√°rios
SELECT '=== TESTE 5: STATUS DOS USU√ÅRIOS ===' as info;
SELECT 
  status,
  COUNT(*) as quantidade
FROM public.usuarios
GROUP BY status
ORDER BY status;

-- 10. Resumo final
SELECT '=== RESUMO FINAL ===' as info;
SELECT 
  'Estrutura da Tabela' as item,
  CASE 
    WHEN EXISTS (
      SELECT 1 FROM information_schema.columns 
      WHERE table_name = 'usuarios' 
      AND column_name = 'user_id'
      AND table_schema = 'public'
    ) THEN '‚úÖ OK'
    ELSE '‚ùå PROBLEMA: user_id n√£o existe'
  END as status
UNION ALL
SELECT 
  'Fun√ß√£o handle_new_user' as item,
  CASE 
    WHEN EXISTS (
      SELECT 1 FROM information_schema.routines 
      WHERE routine_name = 'handle_new_user'
      AND routine_schema = 'public'
    ) THEN '‚úÖ OK'
    ELSE '‚ùå PROBLEMA: Fun√ß√£o n√£o existe'
  END as status
UNION ALL
SELECT 
  'Trigger on_auth_user_created' as item,
  CASE 
    WHEN EXISTS (
      SELECT 1 FROM information_schema.triggers 
      WHERE trigger_name = 'on_auth_user_created'
    ) THEN '‚úÖ OK'
    ELSE '‚ùå PROBLEMA: Trigger n√£o existe'
  END as status
UNION ALL
SELECT 
  'Pol√≠ticas RLS' as item,
  CASE 
    WHEN EXISTS (
      SELECT 1 FROM pg_policies 
      WHERE tablename = 'usuarios'
    ) THEN '‚úÖ OK'
    ELSE '‚ùå PROBLEMA: Sem pol√≠ticas RLS'
  END as status;






