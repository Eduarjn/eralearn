#!/bin/bash

# ========================================
# Script para Configurar V√≠deos no Servidor ERA Learn
# ========================================

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para log
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}"
    exit 1
}

warning() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

info() {
    echo -e "${BLUE}[INFO] $1${NC}"
}

log "üé• Configurando sistema de v√≠deos no servidor ERA Learn..."

# ========================================
# 1. VERIFICAR PR√â-REQUISITOS
# ========================================
log "Verificando pr√©-requisitos..."

if [ ! -f "package.json" ]; then
    error "Execute este script no diret√≥rio raiz do projeto ERA Learn"
fi

# Verificar se Node.js est√° instalado
if ! command -v node &> /dev/null; then
    error "Node.js n√£o est√° instalado"
fi

# Verificar se npm est√° instalado
if ! command -v npm &> /dev/null; then
    error "npm n√£o est√° instalado"
fi

# ========================================
# 2. CRIAR ESTRUTURA DE DIRET√ìRIOS
# ========================================
log "Criando estrutura de diret√≥rios para v√≠deos..."

# Diret√≥rios principais
VIDEO_DIRS=(
    "videos"
    "storage/training-videos"
    "data/files"
    "logs"
)

for dir in "${VIDEO_DIRS[@]}"; do
    if [ ! -d "$dir" ]; then
        mkdir -p "$dir"
        log "‚úÖ Diret√≥rio criado: $dir"
    else
        log "üìÅ Diret√≥rio j√° existe: $dir"
    fi
done

# Definir permiss√µes
chmod 755 videos
chmod 755 storage/training-videos
chmod 755 data/files
chmod 755 logs

log "‚úÖ Permiss√µes configuradas"

# ========================================
# 3. INSTALAR DEPEND√äNCIAS
# ========================================
log "Instalando depend√™ncias..."

if [ ! -d "node_modules" ]; then
    npm install
    log "‚úÖ Depend√™ncias instaladas"
else
    log "üì¶ Depend√™ncias j√° instaladas"
fi

# ========================================
# 4. CONFIGURAR NGINX PARA V√çDEOS
# ========================================
log "Configurando Nginx para v√≠deos..."

# Criar configura√ß√£o espec√≠fica para v√≠deos
cat > nginx-videos.conf << 'EOF'
# ========================================
# Configura√ß√£o Nginx para V√≠deos - ERA Learn
# ========================================

# Configura√ß√£o para streaming de v√≠deos
location /videos/ {
    alias /opt/eralearn/videos/;
    
    # Headers para streaming otimizado
    add_header Accept-Ranges bytes;
    add_header Cache-Control "public, max-age=3600";
    add_header X-Content-Type-Options nosniff;
    add_header X-Frame-Options SAMEORIGIN;
    
    # Configura√ß√µes de buffer para streaming
    proxy_buffering off;
    proxy_request_buffering off;
    
    # Timeouts para v√≠deos longos
    proxy_connect_timeout 60s;
    proxy_send_timeout 60s;
    proxy_read_timeout 60s;
    
    # Cache para v√≠deos
    expires 1h;
}

# Configura√ß√£o para uploads de v√≠deos
location /api/videos/upload-local {
    client_max_body_size 2G;  # Tamanho m√°ximo de upload
    proxy_pass http://localhost:3001;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    
    # Timeouts para uploads grandes
    proxy_connect_timeout 300s;
    proxy_send_timeout 300s;
    proxy_read_timeout 300s;
}

# Configura√ß√£o para API de v√≠deos
location /api/videos {
    proxy_pass http://localhost:3001;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
}

# Configura√ß√£o para health check do servidor de v√≠deos
location /api/health {
    proxy_pass http://localhost:3001;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
}
EOF

log "‚úÖ Configura√ß√£o do Nginx criada"

# ========================================
# 5. CRIAR SCRIPT DE INICIALIZA√á√ÉO
# ========================================
log "Criando script de inicializa√ß√£o..."

cat > start-video-services.sh << 'EOF'
#!/bin/bash

# ========================================
# Script para Iniciar Servi√ßos de V√≠deo
# ========================================

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}"
    exit 1
}

warning() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

info() {
    echo -e "${BLUE}[INFO] $1${NC}"
}

log "üé• Iniciando servi√ßos de v√≠deo..."

# Verificar se os servi√ßos j√° est√£o rodando
if pgrep -f "local-video-server.js" > /dev/null; then
    warning "Servidor de v√≠deos j√° est√° rodando"
else
    log "Iniciando servidor de v√≠deos..."
    nohup node local-video-server.js > logs/video-server.log 2>&1 &
    VIDEO_PID=$!
    echo $VIDEO_PID > logs/video-server.pid
    log "‚úÖ Servidor de v√≠deos iniciado (PID: $VIDEO_PID)"
fi

if pgrep -f "local-upload-server.js" > /dev/null; then
    warning "Servidor de upload j√° est√° rodando"
else
    log "Iniciando servidor de upload..."
    nohup node local-upload-server.js > logs/upload-server.log 2>&1 &
    UPLOAD_PID=$!
    echo $UPLOAD_PID > logs/upload-server.pid
    log "‚úÖ Servidor de upload iniciado (PID: $UPLOAD_PID)"
fi

# Aguardar servi√ßos inicializarem
log "Aguardando servi√ßos inicializarem..."
sleep 5

# Verificar se os servi√ßos est√£o funcionando
log "Verificando status dos servi√ßos..."

# Testar servidor de v√≠deos
if curl -f -s "http://localhost:3001/health" > /dev/null; then
    log "‚úÖ Servidor de v√≠deos funcionando"
else
    warning "‚ö†Ô∏è Servidor de v√≠deos pode n√£o estar funcionando"
fi

# Testar servidor de upload
if curl -f -s "http://localhost:3001/api/health" > /dev/null; then
    log "‚úÖ Servidor de upload funcionando"
else
    warning "‚ö†Ô∏è Servidor de upload pode n√£o estar funcionando"
fi

log "üéâ Servi√ßos de v√≠deo iniciados com sucesso!"
echo ""
echo "üìä Status dos servi√ßos:"
echo "   - Servidor de v√≠deos: http://localhost:3001"
echo "   - Servidor de upload: http://localhost:3001/api"
echo "   - Logs: logs/video-server.log e logs/upload-server.log"
echo ""
echo "üõë Para parar os servi√ßos:"
echo "   ./stop-video-services.sh"
echo ""
EOF

chmod +x start-video-services.sh
log "‚úÖ Script de inicializa√ß√£o criado"

# ========================================
# 6. CRIAR SCRIPT DE PARADA
# ========================================
log "Criando script de parada..."

cat > stop-video-services.sh << 'EOF'
#!/bin/bash

# ========================================
# Script para Parar Servi√ßos de V√≠deo
# ========================================

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warning() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

log "üõë Parando servi√ßos de v√≠deo..."

# Parar servidor de v√≠deos
if [ -f "logs/video-server.pid" ]; then
    VIDEO_PID=$(cat logs/video-server.pid)
    if kill -0 $VIDEO_PID 2>/dev/null; then
        kill $VIDEO_PID
        log "‚úÖ Servidor de v√≠deos parado (PID: $VIDEO_PID)"
    else
        warning "Servidor de v√≠deos j√° estava parado"
    fi
    rm -f logs/video-server.pid
else
    warning "Arquivo PID do servidor de v√≠deos n√£o encontrado"
fi

# Parar servidor de upload
if [ -f "logs/upload-server.pid" ]; then
    UPLOAD_PID=$(cat logs/upload-server.pid)
    if kill -0 $UPLOAD_PID 2>/dev/null; then
        kill $UPLOAD_PID
        log "‚úÖ Servidor de upload parado (PID: $UPLOAD_PID)"
    else
        warning "Servidor de upload j√° estava parado"
    fi
    rm -f logs/upload-server.pid
else
    warning "Arquivo PID do servidor de upload n√£o encontrado"
fi

# Parar processos por nome (fallback)
pkill -f "local-video-server.js" 2>/dev/null || true
pkill -f "local-upload-server.js" 2>/dev/null || true

log "üéâ Servi√ßos de v√≠deo parados com sucesso!"
EOF

chmod +x stop-video-services.sh
log "‚úÖ Script de parada criado"

# ========================================
# 7. CRIAR SCRIPT DE TESTE
# ========================================
log "Criando script de teste..."

cat > test-video-services.sh << 'EOF'
#!/bin/bash

# ========================================
# Script para Testar Servi√ßos de V√≠deo
# ========================================

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}"
}

warning() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

info() {
    echo -e "${BLUE}[INFO] $1${NC}"
}

log "üß™ Testando servi√ßos de v√≠deo..."

# Testar servidor de v√≠deos
log "Testando servidor de v√≠deos..."
if curl -f -s "http://localhost:3001/health" > /dev/null; then
    log "‚úÖ Servidor de v√≠deos funcionando"
    curl -s "http://localhost:3001/health" | jq . 2>/dev/null || curl -s "http://localhost:3001/health"
else
    error "‚ùå Servidor de v√≠deos n√£o est√° funcionando"
fi

echo ""

# Testar servidor de upload
log "Testando servidor de upload..."
if curl -f -s "http://localhost:3001/api/health" > /dev/null; then
    log "‚úÖ Servidor de upload funcionando"
    curl -s "http://localhost:3001/api/health" | jq . 2>/dev/null || curl -s "http://localhost:3001/api/health"
else
    error "‚ùå Servidor de upload n√£o est√° funcionando"
fi

echo ""

# Listar v√≠deos dispon√≠veis
log "Listando v√≠deos dispon√≠veis..."
if curl -f -s "http://localhost:3001/api/videos" > /dev/null; then
    log "‚úÖ Lista de v√≠deos obtida"
    curl -s "http://localhost:3001/api/videos" | jq . 2>/dev/null || curl -s "http://localhost:3001/api/videos"
else
    warning "‚ö†Ô∏è N√£o foi poss√≠vel obter lista de v√≠deos"
fi

echo ""

# Verificar diret√≥rios
log "Verificando diret√≥rios de v√≠deos..."
if [ -d "videos" ]; then
    VIDEO_COUNT=$(find videos -name "*.mp4" -o -name "*.webm" -o -name "*.avi" -o -name "*.mov" | wc -l)
    log "üìÅ V√≠deos encontrados no diret√≥rio: $VIDEO_COUNT"
    if [ $VIDEO_COUNT -gt 0 ]; then
        log "üìã Lista de v√≠deos:"
        find videos -name "*.mp4" -o -name "*.webm" -o -name "*.avi" -o -name "*.mov" | head -10
    fi
else
    warning "‚ö†Ô∏è Diret√≥rio de v√≠deos n√£o encontrado"
fi

log "üéØ Teste de servi√ßos conclu√≠do!"
EOF

chmod +x test-video-services.sh
log "‚úÖ Script de teste criado"

# ========================================
# 8. CRIAR SCRIPT DE MONITORAMENTO
# ========================================
log "Criando script de monitoramento..."

cat > monitor-video-services.sh << 'EOF'
#!/bin/bash

# ========================================
# Script para Monitorar Servi√ßos de V√≠deo
# ========================================

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warning() {
    echo -e "${YELLOW}[WARNING] $1${NC}"
}

error() {
    echo -e "${RED}[ERROR] $1${NC}"
}

info() {
    echo -e "${BLUE}[INFO] $1${NC}"
}

log "üìä Monitorando servi√ßos de v√≠deo..."

while true; do
    clear
    echo "=========================================="
    echo "üé• MONITOR DE SERVI√áOS DE V√çDEO - ERA LEARN"
    echo "=========================================="
    echo ""
    
    # Status do servidor de v√≠deos
    if pgrep -f "local-video-server.js" > /dev/null; then
        echo -e "üìπ Servidor de v√≠deos: ${GREEN}‚úÖ RODANDO${NC}"
    else
        echo -e "üìπ Servidor de v√≠deos: ${RED}‚ùå PARADO${NC}"
    fi
    
    # Status do servidor de upload
    if pgrep -f "local-upload-server.js" > /dev/null; then
        echo -e "üì§ Servidor de upload: ${GREEN}‚úÖ RODANDO${NC}"
    else
        echo -e "üì§ Servidor de upload: ${RED}‚ùå PARADO${NC}"
    fi
    
    echo ""
    
    # Teste de conectividade
    if curl -f -s "http://localhost:3001/health" > /dev/null; then
        echo -e "üåê Conectividade: ${GREEN}‚úÖ OK${NC}"
    else
        echo -e "üåê Conectividade: ${RED}‚ùå FALHA${NC}"
    fi
    
    echo ""
    
    # Contagem de v√≠deos
    if [ -d "videos" ]; then
        VIDEO_COUNT=$(find videos -name "*.mp4" -o -name "*.webm" -o -name "*.avi" -o -name "*.mov" 2>/dev/null | wc -l)
        echo "üìÅ V√≠deos dispon√≠veis: $VIDEO_COUNT"
    else
        echo "üìÅ Diret√≥rio de v√≠deos: N√£o encontrado"
    fi
    
    echo ""
    echo "üîÑ Atualizando a cada 5 segundos... (Ctrl+C para sair)"
    echo "=========================================="
    
    sleep 5
done
EOF

chmod +x monitor-video-services.sh
log "‚úÖ Script de monitoramento criado"

# ========================================
# 9. FINALIZA√á√ÉO
# ========================================
log "üéâ Configura√ß√£o de v√≠deos conclu√≠da!"
echo ""
echo "=========================================="
echo "üé• SISTEMA DE V√çDEOS CONFIGURADO"
echo "=========================================="
echo ""
echo "üìÅ Estrutura criada:"
echo "   - videos/ (v√≠deos principais)"
echo "   - storage/training-videos/ (v√≠deos de treinamento)"
echo "   - data/files/ (arquivos de dados)"
echo "   - logs/ (logs dos servi√ßos)"
echo ""
echo "üöÄ Comandos dispon√≠veis:"
echo "   - ./start-video-services.sh (iniciar servi√ßos)"
echo "   - ./stop-video-services.sh (parar servi√ßos)"
echo "   - ./test-video-services.sh (testar servi√ßos)"
echo "   - ./monitor-video-services.sh (monitorar servi√ßos)"
echo ""
echo "üìã URLs dos servi√ßos:"
echo "   - Servidor de v√≠deos: http://localhost:3001"
echo "   - API de upload: http://localhost:3001/api"
echo "   - Health check: http://localhost:3001/health"
echo ""
echo "üí° Para adicionar v√≠deos:"
echo "   1. Copie os arquivos para o diret√≥rio 'videos/'"
echo "   2. Execute: ./test-video-services.sh"
echo ""
echo "‚úÖ Sistema de v√≠deos pronto para uso!"
echo ""
